"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" This is my .vimrc configuration file
" Michele - March 2019
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins by VimPlug (do :PlugInstall :PlugUpdate ...
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'tpope/vim-sensible'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-repeat'
Plug 'ervandew/supertab'
"Plug 'svermeulen/vim-easyclip'
Plug 'sheerun/vim-polyglot'
Plug 'scrooloose/nerdtree'
Plug 'moll/vim-bbye'
Plug 'airblade/vim-gitgutter'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'mgiugliano/vim-colors-pencil', { 'as': 'pencil' }
Plug 'dylanaraps/fff.vim'
"Plug 'ctrlpvim/ctrlp.vim'
"Plug 'vimwiki/vimwiki'
call plug#end()
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Global comfort-related remappings (see also WP() below)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader = ","
" remap leader from \ to ,

nnoremap  ;  :
" For :w, :q!, etc., pressing SHIFT becomes optional
"nnoremap  :  ;

nnoremap <leader>w :w<CR>
nnoremap <leader>z :wq!<CR>
nnoremap <leader>q :q!<CR>
vnoremap <leader>q <esc>:q!<CR>
" Remap frequent commands (write, quit, and wite&quit)

map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
" Splits - navigation

nnoremap <Tab>   :ls<CR>:b<Space>
nnoremap <S-Tab> :b#<CR>
nnoremap <C-B> :bnext<CR>
" Buffers - navigation
nnoremap <leader>x :Bdelete<CR>
" Deletes the current buffer (thanks to vim-bbye plugin)

nnoremap <leader>2 :silent exec "!make"<CR>:redraw!<CR>
" Launch the bash shell script runMe.sh in the current folder

map <leader>o :setlocal spell<CR>
" Activate spell checking - orthography
nnoremap <leader>s z=
" Spell checking - suggest replacement

nnoremap S :%s//g<Left><Left>
" Replace all is aliased to S.

map <C-n> :NERDTreeToggle<CR>
"NERDTree on/off

" Open fff split on the left side (NERDtree style).
" Vertical split (NERDtree style).
let g:fff#split = "20vnew"
let g:fff#split_direction = "nosplitbelow nosplitright"
" Open fff on press of 'f'
nnoremap f :F<CR>

" nnoremap <C-P> :r !pbpaste<CR>
" Use Ctrl+P to paste from the clipboard (on macOs)

nnoremap tn :tabnew<Space>
nnoremap tk :tabnext<CR>
nnoremap tj :tabprev<CR>
nnoremap th :tabfirst<CR>
nnoremap tl :tablast<CR>
" Tabs - navigation

inoremap \\ <Esc>/<++><Enter>"_c4l
vnoremap \\ <Esc>/<++><Enter>"_c4l
map \\ <Esc>/<++><Enter>"_c4l
" Navigating with guides (LukeSmithxyz)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Specific settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

color dracula
set spelllang=en_us,it

" Editor Internals, Controls, and Appearances
"set nocompatible                  " Use Vim (default) rather than Vi settings.
set backup                        " Backups are nice ...
set backupdir=~/tmp               " Path to backup files
set directory=.                  " Path to swap files
set swapfile
"set noswapfile                    " Do not use swapfiles
set fileformats=unix,dos,mac
set ruler 						  " Show current line and column number in the status bar
set number relativenumber   	  " Hybdrid mode of line numbering: current line and relative nums to it
set cursorline                    " highlight current line
"set cursorcolumn 				   " highlight current column
set showcmd                       " show command in bottom bar
set cmdheight=1                   " Number of screen lines to use for the command-line
set showmode                      " Display the current mode
set splitbelow splitright         " New splits open at the bottom and right, unlike vim defaults
set modeline
set modelines=10
set title
set titleold="Terminal"
set titlestring=%F
set wildmenu                      " visual autocomplete for command menu
set wildchar=<Tab> wildmenu wildmode=longest,list,full
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set bomb
set binary
set ttyfast
set regexpengine=1 				  " Use the old regex engine to improve performances
set autoread 					  " Automatically reload file, if content changed externally
set backspace=indent,eol,start    " Make backspace behave in a sane manner.
set hidden                        " Allow hidden buffers, don't limit to 1 file per window/split
set mouse=a"n                     " Enable the mouse but only in normal mode
set ttymouse=xterm2               " Improved xterm mouse handling
set shell=/bin/bash               " Command to start a shell
set path+=**                      " List of directories to search (tab completion)
set ttimeoutlen=10				  " no delay when quitting visual mode with <Esc>
set updatetime=1000               " decreased from 4s (default) to 1s, for git-gutter
filetype plugin on
filetype plugin indent on         " Enable file type detection and do language-dependent indenting.
"if $TMUX == ''
    set clipboard+=unnamed 		  " Make the yank/paste working in vim within a TMUX session too
"endif 							  " the option 'unnamed' makes it working with OSX copy/paste


" Options for Find and Text Processing
"set noincsearch                     " no incremental search (search after characters are entered)
set incsearch                     " incremental search (search while characters are entered)
set nohlsearch                    " Does NOT highlight all matches
"set hlsearch                      " highlight ALL matches
set ignorecase smartcase          " case-sensitive only if they contain upper-case chars
set synmaxcol=200 				  "Don't bother highlighting anything over 200 chars
syntax enable                         " Switch syntax highlighting on
set conceallevel=0                " I don't like the rendering of Markdown by VIM
set showmatch                     " highlight matching [{()}]
set tabstop=4                     " (max) width of an actual tab character
set softtabstop=0                 " number of spaces in tab when editing
set noexpandtab                   " tabs (in insert mode) insert spaces not tab chars
set shiftwidth=4 				  " size of an indent
set smarttab 					  " tab key (in insert mode) insert spaces or tabs to go to the next indent
"set smartindent
set autoindent                     " Indent at the same level of the previous line
filetype indent on      		   " load filetype-specific indent files
set wrap                		   " Always wrap long lines
set linebreak           		   " Prevents words to be split across lines
set list 						   " Turns on option to highlight specific chars below
":set list lcs=tab:\|\ " (here is a space)
set listchars=tab:▸\ ,trail:· 	   " was: set listchars=tab:▸\ ,eol:¬
highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE
highlight ColorColumn ctermbg=black         " Outline the character at column 81
call matchadd('ColorColumn', '\%81v', 100)  " with a different color (altering on col>80)
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o " No auto commenting on newline


autocmd VimLeavePre * silent exec "!iterm_profile"
" On exiting Vim, execute my bash func iterm_profile() (i.e. to reset iTerm2 profile)

autocmd BufWritePre * %s/\s\+$//e
" Automatically deletes all trailing whitespace on save.

autocmd BufNewFile,BufRead *.md  set filetype=markdown
"autocmd BufNewFile,BufRead *.txt set filetype=markdown
autocmd Filetype markdown,mkd call WP()
" Call function WP() if markdown file

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Word Processing ad-hoc settings and remappings (function)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
func! WP()
    silent exec "!iterm_profile Editing"
	color pencil
	set background=dark
    let g:pencil_neutral_headings = 0
    let g:pencil_higher_contrast_ui = 0
	let g:pencil_gutter_color = 1
	let g:pencil_spell_undercurl = 1
	let g:pencil_terminal_italics = 1
    set conceallevel=0  " I don't like the rendering of Markdown by VIM

	nnoremap <leader>1 :Goyo<CR>
	" Toggle Goyo
	nnoremap <leader>j vipgq
	" Justify the current paragraph

	setlocal spell
	set thesaurus+=~/.vim/words.txt
	set complete+=s
	noremap j gj
	noremap k gk
	noremap 0 g0
	noremap $ g$
	noremap A g$a
	noremap I g0i
	" move the cursor by line **on screen** (not on file)

	nnoremap <leader>s z=
	" Spell checking - suggest replacement

	nnoremap <leader>a :silent %s/\([aeiouAEIOU]\)'/\=tr(submatch(1), 'aeiouAEIOU', 'àèìòùÀÈÌÒÙ')/ge <Bar> %s/ pò/ po'/ge <Bar> %s/chè/ché/ge <Bar> %s/trè/tré/ge <Bar> %s/nè/né/ge <Bar> %s/Nè/Né/ge<CR><CR>
	"nnoremap <leader>a :%s/\([aeiouAEIOU]\)'/\=tr(submatch(1), 'aeiouAEIOU', 'àèìòùÀÈÌÒÙ')/g<CR>
	" Replace a', e', i',... by proper Italian accented letters (handles exceptions) -----
	" http://www.treccani.it/enciclopedia/acuto-o-grave-accento_%28La-grammatica-italiana%29/

	" vim-instant-markdown: Instant Previews from Vim (disable autostart)
	let g:instant_markdown_autostart = 0
	map <leader>md :InstantMarkdownPreview<CR>

	map <leader>b :vsp<space>~/Dropbox/Pro/BibTex/bib.bib<CR>
endfunction

"------------------------------------------------------------------------------------------------------------
"------------------------------------------------------------------------------------------------------------
"------------------------------------------------------------------------------------------------------------
" vimwiki with markdown support
let g:vimwiki_ext2syntax = {'.md': 'markdown',
                  \ '.mkd': 'markdown',
                  \ '.wiki': 'media'}

" Run multiple wikis "
let wiki_1 = {}
let wiki_1.path = '~/Dropbox/Pro/BibTex/wiki/'
let wiki_1.syntax = 'markdown'
let wiki_1.ext = '.md'

let wiki_2 = {}
let wiki_2.path = '~/Dropbox/Pvt/a_private.wiki/'
let wiki_2.syntax = 'markdown'
let wiki_2.ext = '.md'

let g:vimwiki_list = [wiki_1, wiki_2]


" vim-airline
let g:airline_theme = 'powerlineish'
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline_skip_empty_sections = 1

" NERDTree
let NERDTreeShowHidden=1
" launch it when vim starts w/o arguments
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" launch it when vim is invoked with a folder as argument
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
" close vim if NERDTree is the only buffer open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | silent exec "!iterm_profile" | q | endif

" Goyo
function! s:goyo_enter()
  let b:quitting = 0
  let b:quitting_bang = 0
  autocmd QuitPre <buffer> let b:quitting = 1
  cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
  silent !tmux set status off
  silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  set noshowmode
  set noshowcmd
  set scrolloff=999
  set conceallevel=0              " I don't like the rendering of Markdown by VIM
  Limelight
  " ...
endfunction

function! s:goyo_leave()
" Quit Vim if this is the only remaining buffer
   if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
       if b:quitting_bang
             qa!
       else
             qa
        endif
  endif
  silent !tmux set status on
  silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  set showmode
  set showcmd
  set scrolloff=5
  Limelight!
  " ...
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" FuzzyFinder
set rtp+=/usr/local/opt/fzf
nnoremap <silent> <C-f> :FZF<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Snippets - from LukeSmithxyz
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""".bib
	autocmd FileType bib inoremap <leader>a @article{<Enter>author<Space>=<Space>{<++>},<Enter>year<Space>=<Space>{<++>},<Enter>title<Space>=<Space>{<++>},<Enter>journal<Space>=<Space>{<++>},<Enter>volume<Space>=<Space>{<++>},<Enter>pages<Space>=<Space>{<++>},<Enter>}<Enter><++><Esc>8kA,<Esc>i
	autocmd FileType bib inoremap <leader>b @book{<Enter>author<Space>=<Space>{<++>},<Enter>year<Space>=<Space>{<++>},<Enter>title<Space>=<Space>{<++>},<Enter>publisher<Space>=<Space>{<++>},<Enter>}<Enter><++><Esc>6kA,<Esc>i
	"autocmd FileType bib inoremap <leader>c @incollection{<Enter>author<Space>=<Space>{<++>},<Enter>title<Space>=<Space>{<++>},<Enter>booktitle<Space>=<Space>{<++>},<Enter>editor<Space>=<Space>{<++>},<Enter>year<Space>=<Space>{<++>},<Enter>publisher<Space>=<Space>{<++>},<Enter>}<Enter><++><Esc>8kA,<Esc>i

"MARKDOWN
	"autocmd Filetype markdown,rmd map <leader>w yiWi[<esc>Ea](<esc>pa)
	autocmd Filetype markdown,rmd inoremap <leader>n ---<Enter><Enter>
	autocmd Filetype markdown,rmd inoremap <leader>b ****<++><Esc>F*hi
	autocmd Filetype markdown,rmd inoremap <leader>s ~~~~<++><Esc>F~hi
	autocmd Filetype markdown,rmd inoremap <leader>e **<++><Esc>F*i
	autocmd Filetype markdown,rmd inoremap <leader>h ====<Space><++><Esc>F=hi
	autocmd Filetype markdown,rmd inoremap <leader>i ![](<++>)<++><Esc>F[a
	autocmd Filetype markdown,rmd inoremap <leader>a [](<++>)<++><Esc>F[a
	autocmd Filetype markdown,rmd inoremap <leader>1 #<Space><Enter><++><Esc>kA
	autocmd Filetype markdown,rmd inoremap <leader>2 ##<Space><Enter><++><Esc>kA
	autocmd Filetype markdown,rmd inoremap <leader>3 ###<Space><Enter><++><Esc>kA
	autocmd Filetype markdown,rmd inoremap <leader>l --------<Enter>
	"autocmd Filetype rmd inoremap <leader>r ```{r}<CR>```<CR><CR><esc>2kO
	"autocmd Filetype rmd inoremap <leader>p ```{python}<CR>```<CR><CR><esc>2kO
	"autocmd Filetype rmd inoremap <leader>c ```<cr>```<cr><cr><esc>2kO



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Mappings for Greek and Math (unicode) charatcters
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
inoremap <C-v>G Γ
inoremap <C-v>D Δ
inoremap <C-v>T Θ
inoremap <C-v>L Λ
inoremap <C-v>X Ξ
inoremap <C-v>P Π
inoremap <C-v>S Σ
inoremap <C-v>F Φ
inoremap <C-v>P Ψ
inoremap <C-v>O Ω

inoremap <C-v>a α
inoremap <C-v>b β
inoremap <C-v>g γ
inoremap <C-v>d δ
inoremap <C-v>e ε
inoremap <C-v>z ζ
inoremap <C-v>e η
inoremap <C-v>t θ
inoremap <C-v>i ι
inoremap <C-v>k κ
inoremap <C-v>l λ
inoremap <C-v>m μ
inoremap <C-v>x ξ
inoremap <C-v>p π
inoremap <C-v>r ρ
inoremap <C-v>s σ
inoremap <C-v>t τ
inoremap <C-v>p ψ
inoremap <C-v>o ω
inoremap <C-v>f ϕ
inoremap <C-v>n ν

inoremap <C-v>ll →
inoremap <C-v>hh ⇌
inoremap <C-v>kk ↑
inoremap <C-v>jj ↓
inoremap <C-v>= ∝
inoremap <C-v>~ ≈
inoremap <C-v>!= ≠
inoremap <C-v>>= ≥
inoremap <C-v><= ≤
inoremap <C-v>0  °
inoremap <C-v>*  •
inoremap <C-v>co ⌘

